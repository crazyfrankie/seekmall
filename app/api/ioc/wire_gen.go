// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"github.com/crazyfrankie/seekmall/app/api/config"
	"github.com/crazyfrankie/seekmall/app/api/handler"
	"github.com/crazyfrankie/seekmall/app/api/pkg/mws"
	"github.com/gin-gonic/gin"
	"github.com/wechatpay-apiv3/wechatpay-go/core/notify"
	"go.etcd.io/etcd/client/v3"
	"time"
)

// Injectors from wire.go:

func InitGin() *gin.Engine {
	v := InitMws()
	client := InitRegistry()
	userServiceClient := InitUserClient(client)
	smsServiceClient := InitSmsClient(client)
	userHandler := handler.NewUserHandler(userServiceClient, smsServiceClient)
	productServiceClient := InitProductClient(client)
	productHandler := handler.NewProductHandler(productServiceClient)
	cartServiceClient := InitCartClient(client)
	cartHandler := handler.NewCartHandler(cartServiceClient)
	notifyHandler := InitNotify()
	paymentServiceClient := InitPaymentClient(client)
	paymentHandler := handler.NewPaymentHandler(notifyHandler, paymentServiceClient)
	engine := InitWeb(v, userHandler, productHandler, cartHandler, paymentHandler)
	return engine
}

// wire.go:

func InitMws() []gin.HandlerFunc {
	return []gin.HandlerFunc{mws.NewAuthBuilder().
		IgnorePath("/api/user/send-code").
		IgnorePath("/api/user/verify-code").
		Auth(),
	}
}

func InitWeb(mws2 []gin.HandlerFunc, user *handler.UserHandler,
	product *handler.ProductHandler, cart *handler.CartHandler, payment *handler.PaymentHandler) *gin.Engine {
	server := gin.Default()
	server.Use(mws2...)

	user.RegisterRoute(server)
	product.RegisterRoute(server)
	cart.RegisterRoute(server)
	payment.RegisterRoute(server)

	return server
}

func InitRegistry() *clientv3.Client {
	cli, err := clientv3.New(clientv3.Config{
		Endpoints:   []string{config.GetConf().ETCD.Addr},
		DialTimeout: 5 * time.Second,
	})
	if err != nil {
		panic(err)
	}

	return cli
}

func InitNotify() *notify.Handler {
	return notify.NewEmptyHandler()
}
